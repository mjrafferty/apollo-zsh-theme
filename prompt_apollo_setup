# vim:ft=bash

## Configurables
typeset -ga APOLLO_LEFT_PROMPT_ELEMENTS
typeset -ga APOLLO_RIGHT_PROMPT_ELEMENTS
typeset -gi APOLLO_PROFILER=0
typeset -g  APOLLO_LEFT_SEPARATOR=""
typeset -g  APOLLO_RIGHT_SEPARATOR=""
typeset -g  APOLLO_PROMPT_END="> "
typeset -g  APOLLO_LINE_LINKS="true"

APOLLO_LEFT_PROMPT_ELEMENTS=(public_ip virtualenv newline root_indicator context dir vi_mode ruler )
APOLLO_RIGHT_PROMPT_ELEMENTS=(command_execution_time background_jobs game newline status php_version)

## Necessary global variables
typeset -g  _APOLLO_INSTALL_DIR="${0:h}"
typeset -gA _APOLLO_CACHE
typeset -g 	_APOLLO_BUFFER_NAME
typeset -g 	_APOLLO_BUFFER_FD
typeset -g  _APOLLO_FIRST_SEPARATOR_ON_LINE
typeset -g  _APOLLO_PROMPT_COPY # To prevent outside scripts messing with PS1/PROMPT
typeset -ga _APOLLO_LINES_META
typeset -ga _APOLLO_LEFT_LENGTH
typeset -ga _APOLLO_RIGHT_LENGTH
typeset -ga _APOLLO_LINE_MODULES
typeset -ga _APOLLO_PROMPT_LINES
typeset -gi _APOLLO_BREAK_CACHE_COUNTER
typeset -gi _APOLLO_CURRENT_RPROMPT=1
typeset -g  _APOLLO_PROFILER_TOTAL=0
typeset -g  _APOLLO_EXIT_CODE
typeset -g  _APOLLO_PIPE_EXIT_CODES
typeset -g  _APOLLO_RETURN_MESSAGE   # Used as a temporary storage for values to avoid using subshells
typeset -g  _APOLLO_NEWLINE='
'

source "${_APOLLO_INSTALL_DIR}/lib/colors.zsh"
source "${_APOLLO_INSTALL_DIR}/lib/icons.zsh"
source "${_APOLLO_INSTALL_DIR}/lib/utilities.zsh"
source "${_APOLLO_INSTALL_DIR}/lib/link_lines.zsh"

_apollo_preexec() {

  # Run preexec hooks for modules
  for element in "${APOLLO_LEFT_PROMPT_ELEMENTS[@]}" "${APOLLO_RIGHT_PROMPT_ELEMENTS[@]}"; do
    if ((${+functions[_apollo_${element}_preexec]})); then
      "_apollo_${element}_preexec";
    fi
  done

  # Reset break cache counter anytime a command is run.
  _APOLLO_BREAK_CACHE_COUNTER=0;

}

_apollo_precmd() {

  _APOLLO_EXIT_CODE=$?
  _APOLLO_PIPE_EXIT_CODES=( "${pipestatus[@]}" )

  local start

  # Forcefully refresh cache by pressing enter a few times
  if ((_APOLLO_BREAK_CACHE_COUNTER++ >= 2)); then
    _APOLLO_CACHE=();
    _APOLLO_BREAK_CACHE_COUNTER=0;
  fi

  if ((APOLLO_PROFILER > 0)); then
    start="$EPOCHREALTIME"
  fi

  _apollo_run_modules

  if ((APOLLO_PROFILER > 0)); then
    printf "%25s: %f\n" "modules_total" "$_APOLLO_PROFILER_TOTAL"
    printf "%25s: %f\n" "total" "$((EPOCHREALTIME-start))"
    ((_APOLLO_PROFILER_TOTAL=0));
  fi

}

_apollo_run_modules() {

  local line module lines

  PROMPT="$_APOLLO_PROMPT_COPY"

  lines="${#_APOLLO_PROMPT_LINES[@]}"

  for ((line=1;line<=lines;line++)); do
    _APOLLO_FIRST_SEPARATOR_ON_LINE=""
    line_modules=( ${(s: :)_APOLLO_LINE_MODULES[line]} )
    for module in ${line_modules[@]}; do
      _apollo_get_module_text "$module" "left"
    done
  done

  for module in "${APOLLO_RIGHT_PROMPT_ELEMENTS[@]}"; do
    if ((${+functions[_apollo_${module}_run]})); then
      _apollo_get_module_text "$module" "right"
    fi
  done

  if [[ "$APOLLO_LINE_LINKS" == "true" ]]; then
    _apollo_add_links "${#_APOLLO_PROMPT_LINES}"
  fi

}

_apollo_get_module_text() {

  local module side start cache_key cache runtime

  module="$1"
  side="$2"

  if ((APOLLO_PROFILER > 0)); then
    start=${EPOCHREALTIME}
  fi

  if ((${+functions[_apollo_${module}_cache_key]})); then
    "_apollo_${module}_cache_key";
    cache_key="${_APOLLO_RETURN_MESSAGE}"
    cache="${_APOLLO_CACHE["${module}-${cache_key}"]}"
  fi

  if [[ -n "$cache" ]]; then
    _APOLLO_FIRST_SEPARATOR_ON_LINE="$module"
    _APOLLO_RETURN_MESSAGE="${cache}"
  else
    _apollo_set_module_text "$module" "$side" "$cache_key"
  fi

  if ((APOLLO_PROFILER > 0)); then
    runtime="$((EPOCHREALTIME-start))"
    printf "%25s: %f\n" "$module" "$runtime"
    ((_APOLLO_PROFILER_TOTAL+=runtime))
  fi

}

_apollo_set_module_text() {

  local module module_text fg_color bg_color transition_fg_color cache_key side
  local -u fg_var bg_var text length # Convert variable names to upper case when checking config

  module="$1"
  side="$2"
  cache_key="$3"

  fg_var="APOLLO_${module}_FG"
  bg_var="APOLLO_${module}_BG"
  text="_APOLLO_${module}_TEXT"
  length="_APOLLO_${module}_LENGTH"

  # Clear out old message before passing to module
  _APOLLO_RETURN_MESSAGE=""

   "_apollo_${module}_run" >&"${_APOLLO_BUFFER_FD}"

  # Flush any remaining data in buffer
  while read -rt dump <&"${_APOLLO_BUFFER_FD}"; do true; done

  if (( ${#_APOLLO_RETURN_MESSAGE} == 0 )); then
    typeset -gi ${length}="0"
    typeset -g ${text}=""
    if [[ -n "$cache_key" ]]; then
      _APOLLO_CACHE["${module}-${cache_key}"]="${_APOLLO_RETURN_MESSAGE}"
    fi
    return;
  fi

  ## TODO padding
  ## TODO icons?
  ## TODO rework colors
  module_text=" ${_APOLLO_RETURN_MESSAGE} "

  _apollo_translate_color "${(P)${fg_var}}"
  fg_color="${_APOLLO_RETURN_MESSAGE}"

  _apollo_foreground "${fg_color}"
  fg_color="${_APOLLO_RETURN_MESSAGE}"

  _apollo_translate_color "${(P)${bg_var}}"
  bg_color="${_APOLLO_RETURN_MESSAGE}"

  _apollo_foreground "${bg_color}"
  transition_fg_color="${_APOLLO_RETURN_MESSAGE}"

  _apollo_background "${bg_color}"
  bg_color="${_APOLLO_RETURN_MESSAGE}"

  _apollo_add_separator "$side" "$module"

  typeset -g ${text}="${_APOLLO_RETURN_MESSAGE}${fg_color}${bg_color}${module_text}${transition_fg_color}"

  _apollo_get_display_width "${(P)${text}}"
  typeset -gi ${length}="$_APOLLO_RETURN_MESSAGE"

  if [[ -n "$cache_key" ]]; then
    _APOLLO_CACHE["${module}-${cache_key}"]="${_APOLLO_RETURN_MESSAGE}"
  fi


}

_apollo_add_separator() {

  local prompt_side current_module transition_bg_color transition_fg_color
  local -u bg_var

  prompt_side="$1"
  current_module="$2"

  bg_var="APOLLO_${current_module}_BG"

  case "$prompt_side" in
    "left")
      if [[ -n "${_APOLLO_FIRST_SEPARATOR_ON_LINE}" ]]; then

        if [[ "$current_module" == "newline" ]]; then
          transition_bg_color="%k"
        else
          transition_bg_color="%K{${__APOLLO_COLORS[${(P)${bg_var}}]}}"
        fi

        _APOLLO_RETURN_MESSAGE="${transition_bg_color}${APOLLO_LEFT_SEPARATOR}%f"

      else
        _APOLLO_FIRST_SEPARATOR_ON_LINE="$module"
        _APOLLO_RETURN_MESSAGE="%f%k"
      fi
      ;;
    "right")
      transition_fg_color="%F{${__APOLLO_COLORS[${(P)${bg_var}}]}}"
      _APOLLO_RETURN_MESSAGE="${transition_fg_color}${APOLLO_RIGHT_SEPARATOR}"
      ;;
    *);;
  esac

}

## Run once functions ##

_apollo_set_prompts(){

  _apollo_set_left_prompt

  _apollo_make_rprompt
  RPROMPT="${_APOLLO_RETURN_MESSAGE}"

  if [[ "$APOLLO_LINE_LINKS" == "true" && -n "$RPROMPT" ]]; then
    RPROMPT+="%k%F{${__APOLLO_COLORS[${APOLLO_LINK_COLOR}]}}${APOLLO_BR_LINK}%f"
  fi

}

_apollo_set_left_prompt() {

  local element prompt_length module_text current_module
  local -i line_index

  line_index=1;
  prompt_length="${#APOLLO_LEFT_PROMPT_ELEMENTS[@]}"

  for ((element=1; element<=prompt_length;element++)); do

    current_module="${APOLLO_LEFT_PROMPT_ELEMENTS[element]}"

    case "${current_module}" in
      "newline"|"ruler")
        _apollo_add_newline "${current_module}" "${line_index}"
        _APOLLO_FIRST_SEPARATOR_ON_LINE=""
        _APOLLO_PROMPT_LINES[line_index]+="${_APOLLO_RETURN_MESSAGE}"
        ((line_index++));
        _APOLLO_LINES_META[line_index]=0;
        ;;
      *)
        _APOLLO_LINE_MODULES[line_index]+="${current_module} "
        _apollo_get_module_text "$current_module" "left"

        _APOLLO_PROMPT_LINES[line_index]+="\${(e)_APOLLO_${(U)current_module}_TEXT}"
        _APOLLO_LEFT_LENGTH[line_index]+=" + \$_APOLLO_${(U)current_module}_LENGTH"
        ;;
    esac

  done

  _apollo_add_separator "left" "newline"
  _APOLLO_PROMPT_LINES[line_index]+="${_APOLLO_RETURN_MESSAGE}"

  ((_APOLLO_LINES_META[line_index]=1));

  for ((line=1;line<=line_index;line++)); do

    if [[ "$APOLLO_LINE_LINKS" == "true" ]]; then
      PROMPT+="\${_APOLLO_LEFT_LINK[$line]}\${(e)_APOLLO_PROMPT_LINES[$line]}\${_APOLLO_RIGHT_LINK[$line]}"
    else
      PROMPT+="\${(e)_APOLLO_PROMPT_LINES[$line]}"
    fi

    if ((line < line_index)); then
      PROMPT+="${_APOLLO_NEWLINE}"
    fi

  done

  PROMPT+="$APOLLO_PROMPT_END"
  _APOLLO_PROMPT_COPY="$PROMPT"

}

_apollo_add_newline() {

  local current_module faux_rprompt line_index

  current_module="$1"
  line_index="$2"

  _apollo_add_separator "left" "newline"
  _APOLLO_PROMPT_LINES[line_index]+="${_APOLLO_RETURN_MESSAGE}"

  _apollo_make_rprompt
  faux_rprompt="${_APOLLO_RETURN_MESSAGE}"

  if [[ "$APOLLO_LINE_LINKS" == "true" ]]; then
    if (( ( 0 ${(e)_APOLLO_LEFT_LENGTH[line_index]}) > 0 )); then
      ((_APOLLO_LINES_META[line_index]+=1));
    fi
    if (( ( 0 ${(e)_APOLLO_RIGHT_LENGTH[line_index]}) > 0 )); then
      ((_APOLLO_LINES_META[line_index]+=2));
    fi
  fi

  if [[ "${current_module}" == "newline" ]]; then
    _APOLLO_RETURN_MESSAGE="\${(el.((\$COLUMNS - 5 - ( 0 $_APOLLO_LEFT_LENGTH[line_index] $_APOLLO_RIGHT_LENGTH[line_index]))).. .)}"
  else
    _APOLLO_RETURN_MESSAGE="\${(el.((\$COLUMNS - 5 - ( 0 $_APOLLO_LEFT_LENGTH[line_index] $_APOLLO_RIGHT_LENGTH[line_index])))..─.)}"
    ((_APOLLO_LINES_META[line_index]=3));
  fi

  _APOLLO_RETURN_MESSAGE+="${faux_rprompt}%f%k"

}

_apollo_make_rprompt(){

  local prompt_length module_text current_module rprompt

  prompt_length="${#APOLLO_RIGHT_PROMPT_ELEMENTS[@]}"

  while ((_APOLLO_CURRENT_RPROMPT <= prompt_length)); do

    current_module="${APOLLO_RIGHT_PROMPT_ELEMENTS[_APOLLO_CURRENT_RPROMPT]}"
    ((_APOLLO_CURRENT_RPROMPT++));

    case "${current_module}" in
      "newline")
        break;
        ;;
      *)
        _apollo_get_module_text "${current_module}" "right"

        rprompt+="\${(e)_APOLLO_${(U)current_module}_TEXT}"
        _APOLLO_RIGHT_LENGTH[line_index]+=" + \$_APOLLO_${(U)current_module}_LENGTH"
        ;;
    esac

  done

  _APOLLO_RETURN_MESSAGE="${rprompt}"

}

_apollo_cleanup() {

	exec {_APOLLO_BUFFER_FD}>&-

	rm "$_APOLLO_BUFFER_NAME"

}

prompt_apollo_setup() {

  local element

  setopt prompt_subst

  zmodload zsh/datetime

  autoload -Uz add-zsh-hook
  add-zsh-hook precmd _apollo_precmd
  add-zsh-hook preexec _apollo_preexec
  add-zsh-hook zshexit _apollo_cleanup

  PROMPT=""
  RPROMPT=""

  # Open a buffer for modules to use
  _APOLLO_BUFFER_NAME="${TMPDIR:-/tmp}/${USER}_APOLLO_$EPOCHSECONDS"
  mkfifo "${_APOLLO_BUFFER_NAME}"
  exec {_APOLLO_BUFFER_FD}<> "${_APOLLO_BUFFER_NAME}"

  # Load enabled modules and run setup hooks
  for element in "${APOLLO_LEFT_PROMPT_ELEMENTS[@]}" "${APOLLO_RIGHT_PROMPT_ELEMENTS[@]}"; do

    if [[ -f "${_APOLLO_INSTALL_DIR}/modules/${element}" ]]; then

      source "${_APOLLO_INSTALL_DIR}/modules/${element}";

      if ((${+functions[_apollo_${element}_setup]})); then
        "_apollo_${element}_setup";
      fi

    fi

  done

  # Load config files
  for conf in "${_APOLLO_INSTALL_DIR}/conf/"*.conf; do
    source "${conf}";
  done

  _apollo_set_prompts

}

prompt_apollo_setup
