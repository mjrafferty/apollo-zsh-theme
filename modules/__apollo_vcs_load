# vim:ft=zsh

__apollo_vcs_cache_key() {
  __APOLLO_RETURN_MESSAGE="$PWD"
}

__apollo_vcs_always_async() {

  local pattern listed element other_style format_string index
  local -a list vcs_items results
  local context="$1"
  local mode="default"

  zstyle -a "${context}:${mode}" whitelist list

  for pattern in "${list[@]}"; do
    [[ "$PWD" -regex-match $pattern ]] && listed=1
  done

  if ((listed != 1)); then
    zstyle -a "${context}:${mode}" blacklist list

    for pattern in "${list[@]}"; do
      [[ "$PWD" -regex-match $pattern ]] && listed=1
    done

    if ((listed == 1)); then
      __apollo_set_style "${context}:${mode}:blacklist"
      return 0
    fi
  fi

  zstyle -a "${context}:${mode}" elements elements

  for element in "${elements[@]}"; do
    case "$element" in
      "vcs"|"branch"|"action"|"base_dir"|"repo_name"|"sub_dir"|"misc"|"revision"|"staged"|"unstaged")
        case "$element" in
          "revision")
            zstyle ':vcs_info:*:apollo_vcs:*' get-revision "true"
            ;;
          "staged")
            zstyle -s "${context}:${mode}:staged" text stagedstr
            zstyle ':vcs_info:*:apollo_vcs:*' stagedstr "$stagedstr"
            zstyle ':vcs_info:*:apollo_vcs:*' check-for-staged-changes "true"
            ;;
          "unstaged")
            zstyle -s "${context}:${mode}:unstaged" text unstagedstr
            zstyle ':vcs_info:*:apollo_vcs:*' unstagedstr "$unstagedstr"
            zstyle ':vcs_info:*:apollo_vcs:*' check-for-changes "true"
            ;;
        esac
        format_string+="${__APOLLO_VCS_MAP[$element]}\0"
        ;;
      *)
        format_string+="${element}\0"
        ;;
    esac
    vcs_items+="$element"
  done

  zstyle ':vcs_info:*:apollo_vcs:*' formats "${format_string}"
  zstyle ':vcs_info:*:apollo_vcs:*' actionformats "${format_string}"

  vcs_info apollo_vcs

  results=("${(@s.\0.)vcs_info_msg_0_}")

  for ((index=1;index<=${#vcs_items[@]};index++)); do

    element="${vcs_items[index]}"

    case "$element" in
      "vcs"|"branch"|"action"|"base_dir"|"repo_name"|"sub_dir"|"misc"|"revision"|"staged"|"unstaged")
        if [[ -n "${results[index]}" ]]; then
          __apollo_set_style "${context}:${mode}:${element}" --dynamic
          element_style=(${(s:\0:)__APOLLO_RETURN_MESSAGE})
          return_string+="${element_style[1]}${results[index]}${element_style[2]}"
        fi
        ;;
      *)
        if [[ -z "$other_style" ]]; then
          __apollo_set_style "${context}:${mode}:other" --dynamic
          other_style=(${(s:\0:)__APOLLO_RETURN_MESSAGE})
        fi
        return_string+="${other_style[1]}${results[index]}${other_style[2]}"
        ;;
    esac

  done

  __APOLLO_RETURN_MESSAGE="${return_string}"

}

__apollo_vcs_init_async() {

  typeset -gAh __APOLLO_VCS_MAP

  __APOLLO_VCS_MAP=(
    "vcs"       "%s"
    "branch"    "%b"
    "action"    "%a"
    "revision"  "%i"
    "staged"    "%c"
    "unstaged"  "%u"
    "base_dir"  "%R"
    "repo_name" "%r"
    "sub_dir"   "%S"
    "misc"      "%m"
  )

  autoload -Uz vcs_info

  zstyle ':vcs_info:*:apollo_vcs:*' max-exports 1

}
