# vim:ft=zsh

__apollo_git_cache_key() {
  __APOLLO_RETURN_MESSAGE="$PWD"
}

__apollo_git_run() {

  local line="$1"
  local side="$2"
  local async_results="$3"

  __APOLLO_RETURN_MESSAGE="$async_results"

}

__apollo_git_always_async() {

  local line="$1"
  local side="$2"
  local -a elements misc_style element_style
  local return_string element item hash_length ignore_submodules
  local repo_path git_dir commit_hash local_branch remote_branch tag
  local -i modified untracked stash_count ahead behind

  git_dir="$(git rev-parse --git-dir)"

  [[ -z "$git_dir" ]] && return 0

  local_branch=$(__apollo_git_getbranch "${git_dir}")
  action=$(__apollo_git_getaction "${git_dir}")

  zstyle -a ":apollo:git:${mode}:${line}:${side}" elements elements

  for element in "${elements[@]}"; do
    case "$element" in
      "repo_path"|"commit_hash"|"local_branch"|"remote_branch"|"ahead"|"behind"|"modified"|"untracked"|"stash_count"|"tag"|"action")
        case "$element" in
          "repo_path")
            repo_path="$(git rev-parse --show-toplevel )"
            ;;
          "commit_hash")

            zstyle -s ":apollo:git:${mode}:${line}:${side}" hash_length hash_length

            if [[ "$hash_length" == [0-9]* ]]; then
              commit_hash="$(git rev-parse --short="$hash_length" HEAD)"
            else
              commit_hash="$(git rev-parse --short=8 HEAD)"
            fi
            ;;
          "remote_branch")
            remote_branch=${$(git rev-parse --verify ${local_branch}@{upstream} --symbolic-full-name)/refs\/remotes\/}
            ;;
          "stash_count")
            while read item; do ((stash_count+=1)); done < "${git_dir}/logs/refs/stash"
            ;;
          "ahead")
            git rev-list ${local_branch}@{upstream}..HEAD \
              | while read item; do ((ahead+=1)); done
            ;;
          "behind")
            git rev-list HEAD..${local_branch}@{upstream} \
              | while read item; do ((behind+=1)); done
            ;;
          "tag")
            tag=$(git describe --tags --exact-match HEAD)
            ;;
          "modified"|"untracked")

            zstyle -b ":apollo:git:${mode}:${line}:${side}" ignore_submodules ignore_submodules

            if [[ "${ignore_submodules}" == "yes" ]]; then
              git status --porcelain --ignore-submodules
            else
              git status --porcelain
            fi \
              | while read item; do
              if [[ "$item" == "??"* ]]; then
                (( untracked+=1 ))
              else
                (( modified+=1 ))
              fi
            done
            ;;
        esac
        if [[ -n "${(P)element}" ]]; then
          __apollo_set_style ":apollo:git:${mode}:${line}:${side}:${element}" --dynamic
          element_style=(${(s:\0:)__APOLLO_RETURN_MESSAGE})
          return_string+="${element_style[1]}${(P)element}${element_style[2]}"
        fi
        ;;
      *)
        if [[ -z "$misc_style" ]]; then
          __apollo_set_style ":apollo:git:${mode}:${line}:${side}:misc" --dynamic
          misc_style=(${(s:\0:)__APOLLO_RETURN_MESSAGE})
        fi
        return_string+="${misc_style[1]}${element}${misc_style[2]}"
        ;;
    esac
  done

  echo "$return_string"

}

estyle-cfc() {
local d
local -a cfc_dirs
  cfc_dirs=(
    ${HOME}/src/code/*(/N)
  )

  for d in ${cfc_dirs}; do
    d=${d%/##}
    [[ $PWD == $d(|/*) ]] && return 0
  done
  return 1
}

__apollo_git_init_async() {

  __apollo_git_getaction () {

      local gitdir=$1
      local tmp

      for tmp in "${gitdir}/rebase-apply" "${gitdir}/rebase" "${gitdir}/../.dotest" ; do
        if [[ -d ${tmp} ]] ; then
          if   [[ -f "${tmp}/rebasing" ]] ; then
            echo "rebase"
          elif [[ -f "${tmp}/applying" ]] ; then
            echo "am"
          else
            echo "am/rebase"
          fi
          return 0
        fi
      done

      for tmp in "${gitdir}/rebase-merge/interactive" "${gitdir}/.dotest-merge/interactive" ; do
        [[ -f "${tmp}" ]] && echo "rebase-i" && return 0
      done

      for tmp in "${gitdir}/rebase-merge" "${gitdir}/.dotest-merge" ; do
        [[ -d "${tmp}" ]] && echo "rebase-m" && return 0
      done

      [[ -f "${gitdir}/MERGE_HEAD" ]] && echo "merge" && return 0

      [[ -f "${gitdir}/BISECT_LOG" ]] && echo "bisect" && return 0

      if [[ -f "${gitdir}/CHERRY_PICK_HEAD" ]] ; then
        if [[ -d "${gitdir}/sequencer" ]] ; then
          echo "cherry-seq"
        else
          echo "cherry"
        fi
        return 0
      fi

      [[ -d "${gitdir}/sequencer" ]] && echo "cherry-or-revert" && return 0

      return 1
  }

  __apollo_git_getbranch () {

    local gitdir=$1 tmp actiondir gitbranch
    local gitsymref="git symbolic-ref --short HEAD"

    for tmp in "${gitdir}/rebase-apply" "${gitdir}/rebase" "${gitdir}/../.dotest"; do
      if [[ -d ${tmp} ]]; then
        actiondir=${tmp}
        break
      fi
    done

    if [[ -n ${actiondir} ]]; then
      gitbranch="$(${(z)gitsymref} )"
      [[ -z ${gitbranch} ]] && [[ -r ${actiondir}/head-name ]] \
          && gitbranch="$(< ${actiondir}/head-name)"
      [[ -z ${gitbranch} || ${gitbranch} == 'detached HEAD' ]] && [[ -r ${actiondir}/onto ]] \
          && gitbranch="$(< ${actiondir}/onto)"
    elif [[ -f "${gitdir}/MERGE_HEAD" ]] ; then
      gitbranch="$(${(z)gitsymref} )"
      [[ -z ${gitbranch} ]] && gitbranch="$(< ${gitdir}/ORIG_HEAD)"
    elif [[ -d "${gitdir}/rebase-merge" ]] ; then
      gitbranch="$(< ${gitdir}/rebase-merge/head-name)"
      if [[ $gitbranch == 'detached HEAD' ]]; then
        gitbranch="$(< ${gitdir}/rebase-merge/orig-head)"
      fi
    elif [[ -d "${gitdir}/.dotest-merge" ]] ; then
      gitbranch="$(< ${gitdir}/.dotest-merge/head-name)"
    elif gitbranch="$(${(z)gitsymref} )" ; then
    elif gitbranch="refs/tags/$(git describe --all --exact-match HEAD )" ; then
    elif gitbranch="$(git describe --contains HEAD )" ; then
    elif gitbranch="$(git name-rev --name-only --no-undefined --always HEAD )" ; then
    fi

    if [[ -z ${gitbranch} ]]; then
      gitbranch="${${"$(< $gitdir/HEAD)"}[1,7]}..."
    fi

    echo "$gitbranch"

  }

}
