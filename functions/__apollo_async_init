# vim:ft=zsh

typeset -gi __APOLLO_ASYNC
typeset -g  __APOLLO_ASYNC_BUFFER_NAME
typeset -gi __APOLLO_ASYNC_BUFFER_FD
typeset -ga __APOLLO_ASYNC_MODULES
typeset -g  __APOLLO_ASYNC_MANAGER_PID
typeset -gA __APOLLO_ASYNC_RESULTS

typeset -g  __APOLLO_ASYNC_START_SIGNAL="USR1"
typeset -g  __APOLLO_ASYNC_STOP_SIGNAL="USR2"

__apollo_async_worker(){

  typeset -g __APOLLO_ASYNC_WORKER_MODULE="$1"

  trap "__apollo_async_worker_start_job" "${__APOLLO_ASYNC_START_SIGNAL}"
  trap "__apollo_async_worker_stop_job" "${__APOLLO_ASYNC_STOP_SIGNAL}"

  while true; do
    sleep 0.1;
  done
}

__apollo_async_worker_start_job() {

  "__apollo_${__APOLLO_ASYNC_WORKER_MODULE}_async"

  echo "${__APOLLO_ASYNC_WORKER_MODULE};${__APOLLO_RETURN_MESSAGE}" >&"${__APOLLO_ASYNC_BUFFER_FD}"

  kill -"${__APOLLO_ASYNC_START_SIGNAL}" "${__APOLLO_PROMPT_PID}"

}

__apollo_async_worker_stop_job() {}

__apollo_async_start_workers() {

  local module

  for module in "${__APOLLO_ASYNC_MODULES[@]}"; do
    if [[ -z "${__APOLLO_ASYNC_WORKER_PIDS[$module]}" ]] || ! kill -0 "${__APOLLO_ASYNC_WORKER_PIDS[$module]}" &> /dev/null; then
      __apollo_async_worker "$module" &!
      __APOLLO_ASYNC_WORKER_PIDS[$module]="$!"
      sleep 0.1
    fi

    kill -"${__APOLLO_ASYNC_START_SIGNAL}" "${__APOLLO_ASYNC_WORKER_PIDS[$module]}"

  done

}

__apollo_async_manager() {

  typeset -gi __APOLLO_PROMPT_PID="$1"
  typeset -gA __APOLLO_ASYNC_WORKER_PIDS

  trap "__apollo_async_start_workers" "${__APOLLO_ASYNC_START_SIGNAL}"
  trap "__apollo_async_stop_workers" "${__APOLLO_ASYNC_STOP_SIGNAL}"

  while true; do
    sleep 0.1;
  done

}

__apollo_async_manager_start() {

  if [[ -z "$__APOLLO_ASYNC_MANAGER_PID" ]] || ! kill -0 "$__APOLLO_ASYNC_MANAGER_PID" &> /dev/null; then
    __apollo_async_manager $$ &!
    __APOLLO_ASYNC_MANAGER_PID="$!"
  fi

}

__apollo_async_results() {

  local result
  local -a results

  while read -rt result <&"${__APOLLO_ASYNC_BUFFER_FD}"; do
    results=(${(s.;.)result})
    __APOLLO_ASYNC_RESULTS[$results[1]]="${results[2]}"
    __apollo_async_update "${results[1]}"
  done

}

__apollo_async_run() {
  if [[ -n "$__APOLLO_ASYNC_MANAGER_PID" ]]; then
    kill -"${__APOLLO_ASYNC_START_SIGNAL}" "$__APOLLO_ASYNC_MANAGER_PID"
  fi
}

__apollo_async_pause() {
  trap - "${__APOLLO_ASYNC_START_SIGNAL}"
  __apollo_async_manager_start;
}

__apollo_async_resume() {
  __apollo_async_results
  trap "__apollo_async_results" USR1
}

__apollo_async_cleanup () {
  kill "$__APOLLO_ASYNC_MANAGER_PID" &> /dev/null
  exec {__APOLLO_ASYNC_BUFFER_FD}>&-
  rm "$__APOLLO_ASYNC_BUFFER_NAME"
}

__apollo_async_init() {

  __APOLLO_ASYNC_BUFFER_NAME="${TMPDIR:-/tmp}/${USER}__APOLLO_ASYNC_$EPOCHSECONDS"
  mkfifo "${__APOLLO_ASYNC_BUFFER_NAME}"
  exec {__APOLLO_ASYNC_BUFFER_FD}<> "${__APOLLO_ASYNC_BUFFER_NAME}"

  __apollo_async_manager_start;

  trap "__apollo_async_results" USR1
  add-zsh-hook zshexit __apollo_async_cleanup

}

__apollo_async_init "$@"
