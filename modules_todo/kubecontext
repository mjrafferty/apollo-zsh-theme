# vim:ft=zsh
################################################################
# Kubernetes Current Context/Namespace

# Set to false to truncate trailing "/default": "mycontext/default" will become "mycontext".

# Defines context classes for the purpose of applying different styling to different contexts.
#
# APOLLO_KUBECONTEXT_CLASSES must be an array with even number of elements. The first
# element in each pair defines a pattern against which the current context (in the format it is
# displayed in the prompt) gets matched. The second element defines context class. Patterns are
# tried in order. The first match wins.
#
# If a non-empty class <C> is assigned to a context, the module is styled with
# APOLLO_KUBECONTEXT_<U>_BACKGROUND and APOLLO_KUBECONTEXT_<U>_FOREGROUND where <U> is
# uppercased <C>. Otherwise with APOLLO_KUBECONTEXT_BACKGROUND and
# APOLLO_KUBECONTEXT_FOREGROUND.
#
# Example: Use red background for contexts containing "prod", green for "testing" and yellow for
# everything else.
#
#   APOLLO_KUBECONTEXT_CLASSES=(
#       '*prod*'    prod
#       '*testing*' testing
#       '*'         other)
#
#   APOLLO_KUBECONTEXT_PROD_BACKGROUND=red
#   APOLLO_KUBECONTEXT_TESTING_BACKGROUND=green
#   APOLLO_KUBECONTEXT_OTHER_BACKGROUND=yellow

prompt_kubecontext() {
  (( $+commands[kubectl] )) || return
  local cfg
  local -a key
  for cfg in ${(s.:.)${KUBECONFIG:-$HOME/.kube/config}}; do
    local -H stat
    zstat -H stat -- $cfg 2>/dev/null || continue
    key+=($cfg $stat[inode] $stat[mtime] $stat[size] $stat[mode])
  done

  if ! __apollo_cache_get $0 "${key[@]}"; then
    local ctx=$(command kubectl config view -o=jsonpath='{.current-context}')
    if [[ -n $ctx ]]; then
      local p="{.contexts[?(@.name==\"$ctx\")].context.namespace}"
      local ns="${$(command kubectl config view -o=jsonpath=$p):-default}"
      if [[ $ctx != $ns && ($ns != default || $APOLLO_KUBECONTEXT_SHOW_DEFAULT_NAMESPACE == true) ]]; then
        ctx+="/$ns"
      fi
    fi
    local suf
    if [[ -n $ctx ]]; then
      local pat class
      for pat class in $APOLLO_KUBECONTEXT_CLASSES; do
        if [[ $ctx == ${~pat} ]]; then
          [[ -n $class ]] && suf=_${(U)class}
          break
        fi
      done
    fi
    __apollo_cache_set "$ctx" "$suf"
  fi

  [[ -n $__APOLLO_CACHE_VAL[1] ]] || return
  $1_prompt_module $0$__APOLLO_CACHE_VAL[2] $2 magenta white KUBERNETES_ICON 0 '' "${__APOLLO_CACHE_VAL[1]//\%/%%}"
}
